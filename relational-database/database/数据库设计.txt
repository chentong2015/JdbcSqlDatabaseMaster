TODO: Schema Design
- Catalog(Oracle, DB2 and MySQL)和Schema(PostgresSQL)是相同概念
- 软件底层DB设计属于具体细节，任何变动都可能带来巨大的影响
- 多个软件共享DB时存在版本兼容性问题，相同DB不一定支持多版本
- 数据表Version版本之间存在兼容性，升级单个版本可能影响兼容Matrix

TODO: 数据库表设计规范
1. 表的字段尽可能用NOT NULL
2. 字段长度固定的表查询会更快
3. 把数据库的大表按时间或一些标志分成小表(数据分片)
4. 表的ID主键推荐设置成BigINT以支撑长时间使用(10年业务)

TODO. 数据库实战操作
1. 数据库中原则上不存储非法数据，除非用于测试，程序在DB中存储非法数据前必须提示
2. 数据库存储数据基于Byte字节长度，特殊字符经过编码格式后超出存储空间需要截取
3. 数据库可能不支持存储特殊的字符，需要Escape转义字符后再存储
4. 不同的关系型数据库执行的QUERY存在差别，必须考虑兼容性

TODO. Database performance tuning
数据库优化策略，如何提高大量Query执行效率 ?
1. 创建Connection Pool: 连接池高效管理DB的连接资源
2. 执行Batch Query: 降低发送到DB的请求，"DB交互次数"比"将数据插入表"具有更大性能影响
3. 执行Concurrent Query: 将相互独立的操作并发执行
4. 优化Slow Query: 优化慢SQL的执行逻辑，优化查询或更新逻辑
5. 添加Cache Layer: 使用缓存降低DB的请求负载
6. 扩展DB Schema: 将数据分片存储，或使用分布式数据库

TODO. 如何解决执行DB交互耗时UI阻塞的问题?
1. 异步操作Async
   使用异步线程来处理背后的耗时操作, 操作完成后推送数据
   UI界面显示背后的运行进度
2. 数据绑定DataBinding
   使用Controller/Data binding来加载和渲染数据
   后端数据的更新自动同步到UI界面的显示
